/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ISplitsMainInterface extends utils.Interface {
  functions: {
    "acceptControl(address)": FunctionFragment;
    "cancelControlTransfer(address)": FunctionFragment;
    "createSplit(address[],uint32[],uint32,address)": FunctionFragment;
    "distributeERC20(address,address,address[],uint32[],uint32,address)": FunctionFragment;
    "distributeETH(address,address[],uint32[],uint32,address)": FunctionFragment;
    "makeSplitImmutable(address)": FunctionFragment;
    "predictImmutableSplitAddress(address[],uint32[],uint32)": FunctionFragment;
    "transferControl(address,address)": FunctionFragment;
    "updateAndDistributeERC20(address,address,address[],uint32[],uint32,address)": FunctionFragment;
    "updateAndDistributeETH(address,address[],uint32[],uint32,address)": FunctionFragment;
    "updateSplit(address,address[],uint32[],uint32)": FunctionFragment;
    "walletImplementation()": FunctionFragment;
    "withdraw(address,uint256,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptControl"
      | "cancelControlTransfer"
      | "createSplit"
      | "distributeERC20"
      | "distributeETH"
      | "makeSplitImmutable"
      | "predictImmutableSplitAddress"
      | "transferControl"
      | "updateAndDistributeERC20"
      | "updateAndDistributeETH"
      | "updateSplit"
      | "walletImplementation"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptControl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelControlTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSplit",
    values: [string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeERC20",
    values: [string, string, string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeETH",
    values: [string, string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSplitImmutable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "predictImmutableSplitAddress",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferControl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndDistributeERC20",
    values: [string, string, string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndDistributeETH",
    values: [string, string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplit",
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "walletImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelControlTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSplitImmutable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictImmutableSplitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAndDistributeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAndDistributeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CancelControlTransfer(address)": EventFragment;
    "ControlTransfer(address,address,address)": EventFragment;
    "CreateSplit(address)": EventFragment;
    "DistributeERC20(address,address,uint256,address)": EventFragment;
    "DistributeETH(address,uint256,address)": EventFragment;
    "InitiateControlTransfer(address,address)": EventFragment;
    "UpdateSplit(address)": EventFragment;
    "Withdrawal(address,uint256,address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelControlTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControlTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateControlTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface CancelControlTransferEventObject {
  split: string;
}
export type CancelControlTransferEvent = TypedEvent<
  [string],
  CancelControlTransferEventObject
>;

export type CancelControlTransferEventFilter =
  TypedEventFilter<CancelControlTransferEvent>;

export interface ControlTransferEventObject {
  split: string;
  previousController: string;
  newController: string;
}
export type ControlTransferEvent = TypedEvent<
  [string, string, string],
  ControlTransferEventObject
>;

export type ControlTransferEventFilter = TypedEventFilter<ControlTransferEvent>;

export interface CreateSplitEventObject {
  split: string;
}
export type CreateSplitEvent = TypedEvent<[string], CreateSplitEventObject>;

export type CreateSplitEventFilter = TypedEventFilter<CreateSplitEvent>;

export interface DistributeERC20EventObject {
  split: string;
  token: string;
  amount: BigNumber;
  distributorAddress: string;
}
export type DistributeERC20Event = TypedEvent<
  [string, string, BigNumber, string],
  DistributeERC20EventObject
>;

export type DistributeERC20EventFilter = TypedEventFilter<DistributeERC20Event>;

export interface DistributeETHEventObject {
  split: string;
  amount: BigNumber;
  distributorAddress: string;
}
export type DistributeETHEvent = TypedEvent<
  [string, BigNumber, string],
  DistributeETHEventObject
>;

export type DistributeETHEventFilter = TypedEventFilter<DistributeETHEvent>;

export interface InitiateControlTransferEventObject {
  split: string;
  newPotentialController: string;
}
export type InitiateControlTransferEvent = TypedEvent<
  [string, string],
  InitiateControlTransferEventObject
>;

export type InitiateControlTransferEventFilter =
  TypedEventFilter<InitiateControlTransferEvent>;

export interface UpdateSplitEventObject {
  split: string;
}
export type UpdateSplitEvent = TypedEvent<[string], UpdateSplitEventObject>;

export type UpdateSplitEventFilter = TypedEventFilter<UpdateSplitEvent>;

export interface WithdrawalEventObject {
  account: string;
  ethAmount: BigNumber;
  tokens: string[];
  tokenAmounts: BigNumber[];
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber[]],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface ISplitsMain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISplitsMainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptControl(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelControlTransfer(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createSplit(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    makeSplitImmutable(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    predictImmutableSplitAddress(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferControl(
      split: string,
      newController: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAndDistributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAndDistributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSplit(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    walletImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      account: string,
      withdrawETH: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptControl(
    split: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelControlTransfer(
    split: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createSplit(
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    controller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeERC20(
    split: string,
    token: string,
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    distributorAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeETH(
    split: string,
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    distributorAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  makeSplitImmutable(
    split: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  predictImmutableSplitAddress(
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferControl(
    split: string,
    newController: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAndDistributeERC20(
    split: string,
    token: string,
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    distributorAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAndDistributeETH(
    split: string,
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    distributorAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSplit(
    split: string,
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  walletImplementation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    account: string,
    withdrawETH: BigNumberish,
    tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptControl(split: string, overrides?: CallOverrides): Promise<void>;

    cancelControlTransfer(
      split: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createSplit(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<string>;

    distributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makeSplitImmutable(split: string, overrides?: CallOverrides): Promise<void>;

    predictImmutableSplitAddress(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferControl(
      split: string,
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAndDistributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAndDistributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSplit(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    walletImplementation(overrides?: CallOverrides): Promise<string>;

    withdraw(
      account: string,
      withdrawETH: BigNumberish,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelControlTransfer(address)"(
      split?: string | null
    ): CancelControlTransferEventFilter;
    CancelControlTransfer(
      split?: string | null
    ): CancelControlTransferEventFilter;

    "ControlTransfer(address,address,address)"(
      split?: string | null,
      previousController?: string | null,
      newController?: string | null
    ): ControlTransferEventFilter;
    ControlTransfer(
      split?: string | null,
      previousController?: string | null,
      newController?: string | null
    ): ControlTransferEventFilter;

    "CreateSplit(address)"(split?: string | null): CreateSplitEventFilter;
    CreateSplit(split?: string | null): CreateSplitEventFilter;

    "DistributeERC20(address,address,uint256,address)"(
      split?: string | null,
      token?: string | null,
      amount?: null,
      distributorAddress?: string | null
    ): DistributeERC20EventFilter;
    DistributeERC20(
      split?: string | null,
      token?: string | null,
      amount?: null,
      distributorAddress?: string | null
    ): DistributeERC20EventFilter;

    "DistributeETH(address,uint256,address)"(
      split?: string | null,
      amount?: null,
      distributorAddress?: string | null
    ): DistributeETHEventFilter;
    DistributeETH(
      split?: string | null,
      amount?: null,
      distributorAddress?: string | null
    ): DistributeETHEventFilter;

    "InitiateControlTransfer(address,address)"(
      split?: string | null,
      newPotentialController?: string | null
    ): InitiateControlTransferEventFilter;
    InitiateControlTransfer(
      split?: string | null,
      newPotentialController?: string | null
    ): InitiateControlTransferEventFilter;

    "UpdateSplit(address)"(split?: string | null): UpdateSplitEventFilter;
    UpdateSplit(split?: string | null): UpdateSplitEventFilter;

    "Withdrawal(address,uint256,address[],uint256[])"(
      account?: string | null,
      ethAmount?: null,
      tokens?: null,
      tokenAmounts?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      account?: string | null,
      ethAmount?: null,
      tokens?: null,
      tokenAmounts?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    acceptControl(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelControlTransfer(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createSplit(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    makeSplitImmutable(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    predictImmutableSplitAddress(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferControl(
      split: string,
      newController: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAndDistributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAndDistributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSplit(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    walletImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      account: string,
      withdrawETH: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptControl(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelControlTransfer(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createSplit(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    makeSplitImmutable(
      split: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    predictImmutableSplitAddress(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferControl(
      split: string,
      newController: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAndDistributeERC20(
      split: string,
      token: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAndDistributeETH(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      distributorAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSplit(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    walletImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      account: string,
      withdrawETH: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
