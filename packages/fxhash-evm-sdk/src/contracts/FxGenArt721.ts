/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type HTMLTagStruct = {
  name: string;
  contractAddress: string;
  contractData: BytesLike;
  tagType: BigNumberish;
  tagOpen: BytesLike;
  tagClose: BytesLike;
  tagContent: BytesLike;
};

export type HTMLTagStructOutput = [
  string,
  string,
  string,
  number,
  string,
  string,
  string
] & {
  name: string;
  contractAddress: string;
  contractData: string;
  tagType: number;
  tagOpen: string;
  tagClose: string;
  tagContent: string;
};

export type HTMLRequestStruct = {
  headTags: HTMLTagStruct[];
  bodyTags: HTMLTagStruct[];
};

export type HTMLRequestStructOutput = [
  HTMLTagStructOutput[],
  HTMLTagStructOutput[]
] & { headTags: HTMLTagStructOutput[]; bodyTags: HTMLTagStructOutput[] };

export type MetadataInfoStruct = {
  baseURI: string;
  imageURI: string;
  animation: HTMLRequestStruct;
  attributes: HTMLRequestStruct;
};

export type MetadataInfoStructOutput = [
  string,
  string,
  HTMLRequestStructOutput,
  HTMLRequestStructOutput
] & {
  baseURI: string;
  imageURI: string;
  animation: HTMLRequestStructOutput;
  attributes: HTMLRequestStructOutput;
};

export type ProjectInfoStruct = {
  enabled: boolean;
  onchain: boolean;
  supply: BigNumberish;
  contractURI: string;
  metadataInfo: MetadataInfoStruct;
};

export type ProjectInfoStructOutput = [
  boolean,
  boolean,
  BigNumber,
  string,
  MetadataInfoStructOutput
] & {
  enabled: boolean;
  onchain: boolean;
  supply: BigNumber;
  contractURI: string;
  metadataInfo: MetadataInfoStructOutput;
};

export type ReserveInfoStruct = {
  startTime: BigNumberish;
  endTime: BigNumberish;
  allocation: BigNumberish;
};

export type ReserveInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
  startTime: BigNumber;
  endTime: BigNumber;
  allocation: BigNumber;
};

export type MintInfoStruct = { minter: string; reserveInfo: ReserveInfoStruct };

export type MintInfoStructOutput = [string, ReserveInfoStructOutput] & {
  minter: string;
  reserveInfo: ReserveInfoStructOutput;
};

export interface FxGenArt721Interface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseRoyalties(uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "contractRegistry()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "genArtInfo(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRoyalties(uint256)": FunctionFragment;
    "initialize(address,address,(bool,bool,uint240,string,(string,string,((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]),((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]))),(address,(uint64,uint64,uint128))[],address[],uint96[])": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "issuerInfo()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerMint(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "reduceSupply(uint240)": FunctionFragment;
    "remainingSupply()": FunctionFragment;
    "renderer()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roleRegistry()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseRoyalties(address[],uint96[])": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setImageURI(string)": FunctionFragment;
    "setRenderer(address)": FunctionFragment;
    "setTokenRoyalties(uint256,address[],uint96[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleMint()": FunctionFragment;
    "toggleOnchain()": FunctionFragment;
    "tokenRoyalties(uint256,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "baseRoyalties"
      | "burn"
      | "contractRegistry"
      | "contractURI"
      | "genArtInfo"
      | "getApproved"
      | "getRoyalties"
      | "initialize"
      | "isApprovedForAll"
      | "isMinter"
      | "issuerInfo"
      | "mint"
      | "name"
      | "owner"
      | "ownerMint"
      | "ownerOf"
      | "reduceSupply"
      | "remainingSupply"
      | "renderer"
      | "renounceOwnership"
      | "roleRegistry"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseRoyalties"
      | "setBaseURI"
      | "setContractURI"
      | "setImageURI"
      | "setRenderer"
      | "setTokenRoyalties"
      | "supportsInterface"
      | "symbol"
      | "toggleMint"
      | "toggleOnchain"
      | "tokenRoyalties"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseRoyalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genArtInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      ProjectInfoStruct,
      MintInfoStruct[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "issuerInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerMint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renderer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRoyalties",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setImageURI", values: [string]): string;
  encodeFunctionData(functionFragment: "setRenderer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenRoyalties",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleOnchain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRoyalties",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "genArtInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuerInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reduceSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renderer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImageURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toggleMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleOnchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURIUpdated(string)": EventFragment;
    "ContractURIUpdated(string)": EventFragment;
    "ImageURIUpdated(string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectInitialized((bool,bool,uint240,string,(string,string,((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]),((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]))),(address,(uint64,uint64,uint128))[],address)": EventFragment;
    "RendererUpdated(address)": EventFragment;
    "TokenIdRoyaltiesUpdated(uint256,address[],uint96[])": EventFragment;
    "TokenRoyaltiesUpdated(address[],uint96[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImageURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RendererUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenIdRoyaltiesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRoyaltiesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURIUpdatedEventObject {
  _uri: string;
}
export type BaseURIUpdatedEvent = TypedEvent<
  [string],
  BaseURIUpdatedEventObject
>;

export type BaseURIUpdatedEventFilter = TypedEventFilter<BaseURIUpdatedEvent>;

export interface ContractURIUpdatedEventObject {
  _uri: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface ImageURIUpdatedEventObject {
  _uri: string;
}
export type ImageURIUpdatedEvent = TypedEvent<
  [string],
  ImageURIUpdatedEventObject
>;

export type ImageURIUpdatedEventFilter = TypedEventFilter<ImageURIUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProjectInitializedEventObject {
  _projectInfo: ProjectInfoStructOutput;
  _mintInfo: MintInfoStructOutput[];
  _primaryReceiver: string;
}
export type ProjectInitializedEvent = TypedEvent<
  [ProjectInfoStructOutput, MintInfoStructOutput[], string],
  ProjectInitializedEventObject
>;

export type ProjectInitializedEventFilter =
  TypedEventFilter<ProjectInitializedEvent>;

export interface RendererUpdatedEventObject {
  _renderer: string;
}
export type RendererUpdatedEvent = TypedEvent<
  [string],
  RendererUpdatedEventObject
>;

export type RendererUpdatedEventFilter = TypedEventFilter<RendererUpdatedEvent>;

export interface TokenIdRoyaltiesUpdatedEventObject {
  tokenId: BigNumber;
  receivers: string[];
  basisPoint: BigNumber[];
}
export type TokenIdRoyaltiesUpdatedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[]],
  TokenIdRoyaltiesUpdatedEventObject
>;

export type TokenIdRoyaltiesUpdatedEventFilter =
  TypedEventFilter<TokenIdRoyaltiesUpdatedEvent>;

export interface TokenRoyaltiesUpdatedEventObject {
  receivers: string[];
  basisPoints: BigNumber[];
}
export type TokenRoyaltiesUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  TokenRoyaltiesUpdatedEventObject
>;

export type TokenRoyaltiesUpdatedEventFilter =
  TypedEventFilter<TokenRoyaltiesUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface FxGenArt721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FxGenArt721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseRoyalties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; basisPoints: BigNumber }
    >;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    genArtInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { fxParams: string; seed: string }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoyalties(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        allReceivers: string[];
        allBasisPoints: BigNumber[];
      }
    >;

    initialize(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMinter(_minter: string, overrides?: CallOverrides): Promise<[boolean]>;

    issuerInfo(
      overrides?: CallOverrides
    ): Promise<
      [ProjectInfoStructOutput, string] & {
        projectInfo: ProjectInfoStructOutput;
        primaryReceiver: string;
      }
    >;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerMint(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reduceSupply(
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    remainingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    renderer(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    roleRegistry(overrides?: CallOverrides): Promise<[string]>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; amount: BigNumber }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBaseRoyalties(
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setImageURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenRoyalties(
      _tokenId: BigNumberish,
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleMint(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    toggleOnchain(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenRoyalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; basisPoints: BigNumber }
    >;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseRoyalties(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; basisPoints: BigNumber }
  >;

  burn(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  genArtInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { fxParams: string; seed: string }>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoyalties(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & {
      allReceivers: string[];
      allBasisPoints: BigNumber[];
    }
  >;

  initialize(
    _owner: string,
    _primaryReceiver: string,
    _projectInfo: ProjectInfoStruct,
    _mintInfo: MintInfoStruct[],
    _royaltyReceivers: string[],
    _basisPoints: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinter(_minter: string, overrides?: CallOverrides): Promise<boolean>;

  issuerInfo(
    overrides?: CallOverrides
  ): Promise<
    [ProjectInfoStructOutput, string] & {
      projectInfo: ProjectInfoStructOutput;
      primaryReceiver: string;
    }
  >;

  mint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerMint(
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  reduceSupply(
    _supply: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  remainingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  renderer(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  roleRegistry(overrides?: CallOverrides): Promise<string>;

  royaltyInfo(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { receiver: string; amount: BigNumber }>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBaseRoyalties(
    _receivers: string[],
    _basisPoints: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContractURI(
    _uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setImageURI(
    _uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRenderer(
    _renderer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenRoyalties(
    _tokenId: BigNumberish,
    _receivers: string[],
    _basisPoints: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleMint(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  toggleOnchain(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenRoyalties(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; basisPoints: BigNumber }
  >;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseRoyalties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; basisPoints: BigNumber }
    >;

    burn(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    genArtInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { fxParams: string; seed: string }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoyalties(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        allReceivers: string[];
        allBasisPoints: BigNumber[];
      }
    >;

    initialize(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(_minter: string, overrides?: CallOverrides): Promise<boolean>;

    issuerInfo(
      overrides?: CallOverrides
    ): Promise<
      [ProjectInfoStructOutput, string] & {
        projectInfo: ProjectInfoStructOutput;
        primaryReceiver: string;
      }
    >;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerMint(_to: string, overrides?: CallOverrides): Promise<void>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    reduceSupply(
      _supply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remainingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    renderer(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roleRegistry(overrides?: CallOverrides): Promise<string>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; amount: BigNumber }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseRoyalties(
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setImageURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setRenderer(_renderer: string, overrides?: CallOverrides): Promise<void>;

    setTokenRoyalties(
      _tokenId: BigNumberish,
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleMint(overrides?: CallOverrides): Promise<void>;

    toggleOnchain(overrides?: CallOverrides): Promise<void>;

    tokenRoyalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; basisPoints: BigNumber }
    >;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BaseURIUpdated(string)"(_uri?: string | null): BaseURIUpdatedEventFilter;
    BaseURIUpdated(_uri?: string | null): BaseURIUpdatedEventFilter;

    "ContractURIUpdated(string)"(
      _uri?: string | null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(_uri?: string | null): ContractURIUpdatedEventFilter;

    "ImageURIUpdated(string)"(_uri?: string | null): ImageURIUpdatedEventFilter;
    ImageURIUpdated(_uri?: string | null): ImageURIUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProjectInitialized((bool,bool,uint240,string,(string,string,((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]),((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]))),(address,(uint64,uint64,uint128))[],address)"(
      _projectInfo?: ProjectInfoStruct | null,
      _mintInfo?: MintInfoStruct[] | null,
      _primaryReceiver?: string | null
    ): ProjectInitializedEventFilter;
    ProjectInitialized(
      _projectInfo?: ProjectInfoStruct | null,
      _mintInfo?: MintInfoStruct[] | null,
      _primaryReceiver?: string | null
    ): ProjectInitializedEventFilter;

    "RendererUpdated(address)"(
      _renderer?: string | null
    ): RendererUpdatedEventFilter;
    RendererUpdated(_renderer?: string | null): RendererUpdatedEventFilter;

    "TokenIdRoyaltiesUpdated(uint256,address[],uint96[])"(
      tokenId?: BigNumberish | null,
      receivers?: null,
      basisPoint?: null
    ): TokenIdRoyaltiesUpdatedEventFilter;
    TokenIdRoyaltiesUpdated(
      tokenId?: BigNumberish | null,
      receivers?: null,
      basisPoint?: null
    ): TokenIdRoyaltiesUpdatedEventFilter;

    "TokenRoyaltiesUpdated(address[],uint96[])"(
      receivers?: null,
      basisPoints?: null
    ): TokenRoyaltiesUpdatedEventFilter;
    TokenRoyaltiesUpdated(
      receivers?: null,
      basisPoints?: null
    ): TokenRoyaltiesUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseRoyalties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    genArtInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyalties(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinter(_minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    issuerInfo(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerMint(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reduceSupply(
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    remainingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    renderer(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    roleRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBaseRoyalties(
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setImageURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenRoyalties(
      _tokenId: BigNumberish,
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleMint(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    toggleOnchain(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenRoyalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseRoyalties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genArtInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalties(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      _minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuerInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerMint(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reduceSupply(
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    remainingSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renderer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    roleRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBaseRoyalties(
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setImageURI(
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenRoyalties(
      _tokenId: BigNumberish,
      _receivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleMint(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    toggleOnchain(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenRoyalties(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
