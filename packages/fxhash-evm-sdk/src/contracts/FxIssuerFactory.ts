/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ConfigInfoStruct = {
  feeShare: BigNumberish;
  referrerShare: BigNumberish;
  lockTime: BigNumberish;
  defaultMetadata: string;
};

export type ConfigInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  feeShare: BigNumber;
  referrerShare: BigNumber;
  lockTime: BigNumber;
  defaultMetadata: string;
};

export type HTMLTagStruct = {
  name: string;
  contractAddress: string;
  contractData: BytesLike;
  tagType: BigNumberish;
  tagOpen: BytesLike;
  tagClose: BytesLike;
  tagContent: BytesLike;
};

export type HTMLTagStructOutput = [
  string,
  string,
  string,
  number,
  string,
  string,
  string
] & {
  name: string;
  contractAddress: string;
  contractData: string;
  tagType: number;
  tagOpen: string;
  tagClose: string;
  tagContent: string;
};

export type HTMLRequestStruct = {
  headTags: HTMLTagStruct[];
  bodyTags: HTMLTagStruct[];
};

export type HTMLRequestStructOutput = [
  HTMLTagStructOutput[],
  HTMLTagStructOutput[]
] & { headTags: HTMLTagStructOutput[]; bodyTags: HTMLTagStructOutput[] };

export type MetadataInfoStruct = {
  baseURI: string;
  imageURI: string;
  animation: HTMLRequestStruct;
  attributes: HTMLRequestStruct;
};

export type MetadataInfoStructOutput = [
  string,
  string,
  HTMLRequestStructOutput,
  HTMLRequestStructOutput
] & {
  baseURI: string;
  imageURI: string;
  animation: HTMLRequestStructOutput;
  attributes: HTMLRequestStructOutput;
};

export type ProjectInfoStruct = {
  enabled: boolean;
  onchain: boolean;
  supply: BigNumberish;
  contractURI: string;
  metadataInfo: MetadataInfoStruct;
};

export type ProjectInfoStructOutput = [
  boolean,
  boolean,
  BigNumber,
  string,
  MetadataInfoStructOutput
] & {
  enabled: boolean;
  onchain: boolean;
  supply: BigNumber;
  contractURI: string;
  metadataInfo: MetadataInfoStructOutput;
};

export type ReserveInfoStruct = {
  startTime: BigNumberish;
  endTime: BigNumberish;
  allocation: BigNumberish;
};

export type ReserveInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
  startTime: BigNumber;
  endTime: BigNumber;
  allocation: BigNumber;
};

export type MintInfoStruct = { minter: string; reserveInfo: ReserveInfoStruct };

export type MintInfoStructOutput = [string, ReserveInfoStructOutput] & {
  minter: string;
  reserveInfo: ReserveInfoStructOutput;
};

export interface FxIssuerFactoryInterface extends utils.Interface {
  functions: {
    "configInfo()": FunctionFragment;
    "createProject(address,address,(bool,bool,uint240,string,(string,string,((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]),((string,address,bytes,uint8,bytes,bytes,bytes)[],(string,address,bytes,uint8,bytes,bytes,bytes)[]))),(address,(uint64,uint64,uint128))[],address[],uint96[])": FunctionFragment;
    "implementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "projectId()": FunctionFragment;
    "projects(uint96)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setConfig((uint64,uint64,uint128,string))": FunctionFragment;
    "setImplementation(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "configInfo"
      | "createProject"
      | "implementation"
      | "owner"
      | "projectId"
      | "projects"
      | "renounceOwnership"
      | "setConfig"
      | "setImplementation"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      string,
      string,
      ProjectInfoStruct,
      MintInfoStruct[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "projectId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [ConfigInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "configInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ConfigUpdated(address,(uint64,uint64,uint128,string))": EventFragment;
    "ImplementationUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectCreated(uint96,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImplementationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
}

export interface ConfigUpdatedEventObject {
  _owner: string;
  _configInfo: ConfigInfoStructOutput;
}
export type ConfigUpdatedEvent = TypedEvent<
  [string, ConfigInfoStructOutput],
  ConfigUpdatedEventObject
>;

export type ConfigUpdatedEventFilter = TypedEventFilter<ConfigUpdatedEvent>;

export interface ImplementationUpdatedEventObject {
  _owner: string;
  _implementation: string;
}
export type ImplementationUpdatedEvent = TypedEvent<
  [string, string],
  ImplementationUpdatedEventObject
>;

export type ImplementationUpdatedEventFilter =
  TypedEventFilter<ImplementationUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProjectCreatedEventObject {
  _projectId: BigNumber;
  _owner: string;
  _genArtToken: string;
}
export type ProjectCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  ProjectCreatedEventObject
>;

export type ProjectCreatedEventFilter = TypedEventFilter<ProjectCreatedEvent>;

export interface FxIssuerFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FxIssuerFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        feeShare: BigNumber;
        referrerShare: BigNumber;
        lockTime: BigNumber;
        defaultMetadata: string;
      }
    >;

    createProject(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    projectId(overrides?: CallOverrides): Promise<[BigNumber]>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConfig(
      _configInfo: ConfigInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  configInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      feeShare: BigNumber;
      referrerShare: BigNumber;
      lockTime: BigNumber;
      defaultMetadata: string;
    }
  >;

  createProject(
    _owner: string,
    _primaryReceiver: string,
    _projectInfo: ProjectInfoStruct,
    _mintInfo: MintInfoStruct[],
    _royaltyReceivers: string[],
    _basisPoints: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  projectId(overrides?: CallOverrides): Promise<BigNumber>;

  projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConfig(
    _configInfo: ConfigInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setImplementation(
    _implementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    configInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        feeShare: BigNumber;
        referrerShare: BigNumber;
        lockTime: BigNumber;
        defaultMetadata: string;
      }
    >;

    createProject(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    projectId(overrides?: CallOverrides): Promise<BigNumber>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setConfig(
      _configInfo: ConfigInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplementation(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConfigUpdated(address,(uint64,uint64,uint128,string))"(
      _owner?: string | null,
      _configInfo?: null
    ): ConfigUpdatedEventFilter;
    ConfigUpdated(
      _owner?: string | null,
      _configInfo?: null
    ): ConfigUpdatedEventFilter;

    "ImplementationUpdated(address,address)"(
      _owner?: string | null,
      _implementation?: string | null
    ): ImplementationUpdatedEventFilter;
    ImplementationUpdated(
      _owner?: string | null,
      _implementation?: string | null
    ): ImplementationUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProjectCreated(uint96,address,address)"(
      _projectId?: BigNumberish | null,
      _owner?: string | null,
      _genArtToken?: string | null
    ): ProjectCreatedEventFilter;
    ProjectCreated(
      _projectId?: BigNumberish | null,
      _owner?: string | null,
      _genArtToken?: string | null
    ): ProjectCreatedEventFilter;
  };

  estimateGas: {
    configInfo(overrides?: CallOverrides): Promise<BigNumber>;

    createProject(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    projectId(overrides?: CallOverrides): Promise<BigNumber>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setConfig(
      _configInfo: ConfigInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createProject(
      _owner: string,
      _primaryReceiver: string,
      _projectInfo: ProjectInfoStruct,
      _mintInfo: MintInfoStruct[],
      _royaltyReceivers: string[],
      _basisPoints: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _configInfo: ConfigInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
